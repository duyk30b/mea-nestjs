networks:
  mn_network:
    driver: bridge

services:
  api_public:
    container_name: mc_api_public
    image: mi_production:1.0.0
    restart: unless-stopped
    networks:
      - mn_network
    depends_on:
      - postgres
      - redis
    build:
      dockerfile: Dockerfile
      context: './'
      target: production
    command:
      [
        'sh',
        '-c',
        'npm run migration:run && node dist/apps/api-public/main'
      ] # "npm run build && npm run migration:run && node dist/apps/api-public/main"
    environment:
      - NODE_ENV=production

  postgres:
    container_name: mc_postgres
    image: postgres:16.1-alpine
    restart: unless-stopped
    networks:
      - mn_network
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./data/backup:/backup
      - ./data/restore:/restore
    environment:
      POSTGRES_DB: ${SQL_DATABASE:-mea_sql}
      POSTGRES_USER: ${SQL_USERNAME:-mea}
      POSTGRES_PASSWORD: ${SQL_PASSWORD:-Abc12345}
    # ports:
    #   - 25432:5432

  redis:
    container_name: mc_redis
    image: redis:7.4.0-alpine
    restart: unless-stopped
    networks:
      - mn_network
    command:
      [
        'redis-server',
        '--requirepass',
        '${REDIS_PASSWORD:-Abc12345}',
        '--save',
        '60',
        '1',
        '--dir',
        '/data'
      ]
    volumes:
      - ./data/redis:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-Abc12345}
      - REDIS_USERNAME=${REDIS_USERNAME:-mea}
    # ports:
    #   - "26379:6379"

  nginx:
    container_name: mc_nginx
    image: nginx:1.23.3-alpine
    restart: unless-stopped
    networks:
      - mn_network
    depends_on:
      - api_public
    volumes:
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - ./nginx/adminer.d/:/etc/nginx/adminer.d/
      - ./nginx/ssl/:/etc/nginx/ssl/
    ports:
      - "80:80"
      - "443:443"
      # - "23080:23080"

  adminer:
    container_name: mc_adminer
    image: adminer:4.8.1
    restart: unless-stopped
    networks:
      - mn_network
    depends_on:
      - postgres
    ports:
      - ${ADMINER_PORT:-23080}:8080

  redis-insight:
    container_name: mc_redis-insight
    image: redis/redisinsight:2.52
    restart: unless-stopped
    networks:
      - mn_network
    depends_on:
      - redis
    volumes:
      - ./data/redis-insight:/db
    ports:
      - '${REDIS_INSIGHT_PORT:-25540}:5540'
